{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, provide, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem, useFormItemInputId } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElColorPicker\",\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine\n  },\n  directives: {\n    ClickOutside\n  },\n  props: {\n    modelValue: String,\n    id: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    label: {\n      type: String,\n      default: void 0\n    },\n    tabindex: {\n      type: [String, Number],\n      default: 0\n    },\n    predefine: Array,\n    validateEvent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"color\");\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const {\n      inputId: buttonId,\n      isLabeledByFormItem\n    } = useFormItemInputId(props, {\n      formItemContext: formItem\n    });\n    const hue = ref();\n    const svPanel = ref();\n    const alpha = ref();\n    const popper = ref(null);\n    let shouldActiveChange = true;\n    const color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat || \"\",\n      value: props.modelValue\n    }));\n    const showPicker = ref(false);\n    const showPanelColor = ref(false);\n    const customInput = ref(\"\");\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n\n      return displayedRgb(color, props.showAlpha);\n    });\n    const colorSize = useSize();\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || (form == null ? void 0 : form.disabled));\n    });\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    const buttonAriaLabel = computed(() => {\n      return !isLabeledByFormItem.value ? props.label || t(\"el.colorpicker.defaultLabel\") : void 0;\n    });\n    const buttonAriaLabelledby = computed(() => {\n      return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;\n    });\n    watch(() => props.modelValue, newVal => {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        shouldActiveChange = false;\n        color.fromString(newVal);\n      }\n    });\n    watch(() => currentColor.value, val => {\n      customInput.value = val;\n      shouldActiveChange && emit(\"active-change\", val);\n      shouldActiveChange = true;\n    });\n    watch(() => color.value, () => {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw new TypeError(\"color should be instance of _color Class\");\n      }\n\n      const {\n        r,\n        g,\n        b\n      } = color2.toRgb();\n      return showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get(\"alpha\") / 100})` : `rgb(${r}, ${g}, ${b})`;\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100);\n\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          color.value = \"\";\n          nextTick(() => {\n            showPanelColor.value = false;\n          });\n        }\n      });\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n\n    function confirmValue() {\n      const value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n\n      if (props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n\n      debounceSetShowPicker(false);\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || \"\",\n          value: props.modelValue\n        });\n\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n\n    function clear() {\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n      }\n\n      resetColor();\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(() => showPicker.value, () => {\n      nextTick(() => {\n        var _a, _b, _c;\n\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor\n    });\n    return {\n      color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      buttonId,\n      buttonAriaLabel,\n      buttonAriaLabelledby,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"aria-label\", \"aria-labelledby\", \"aria-description\", \"tabindex\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_hue_slider = resolveComponent(\"hue-slider\");\n\n  const _component_sv_panel = resolveComponent(\"sv-panel\");\n\n  const _component_alpha_slider = resolveComponent(\"alpha-slider\");\n\n  const _component_predefine = resolveComponent(\"predefine\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _directive_click_outside = resolveDirective(\"click-outside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    \"gpu-acceleration\": false,\n    \"popper-class\": [_ctx.ns.be(\"picker\", \"panel\"), _ctx.ns.b(\"dropdown\"), _ctx.popperClass],\n    \"stop-popper-mouse-event\": false,\n    effect: \"light\",\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"main-wrapper\"))\n    }, [createVNode(_component_hue_slider, {\n      ref: \"hue\",\n      class: \"hue-slider\",\n      color: _ctx.color,\n      vertical: \"\"\n    }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n      ref: \"svPanel\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n      key: 0,\n      ref: \"alpha\",\n      color: _ctx.color\n    }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n      key: 1,\n      ref: \"predefine\",\n      color: _ctx.color,\n      colors: _ctx.predefine\n    }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btns\"))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"value\"))\n    }, [createVNode(_component_el_input, {\n      modelValue: _ctx.customInput,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.customInput = $event),\n      \"validate-event\": false,\n      size: \"small\",\n      onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n      onBlur: _ctx.handleConfirm\n    }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])], 2), createVNode(_component_el_button, {\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"link-btn\")),\n      text: \"\",\n      size: \"small\",\n      onClick: _ctx.clear\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"]), createVNode(_component_el_button, {\n      plain: \"\",\n      size: \"small\",\n      class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btn\")),\n      onClick: _ctx.confirmValue\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)]),\n      _: 1\n    }, 8, [\"class\", \"onClick\"])], 2)])), [[_directive_click_outside, _ctx.hide]])]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      id: _ctx.buttonId,\n      class: normalizeClass([_ctx.ns.b(\"picker\"), _ctx.ns.is(\"disabled\", _ctx.colorDisabled), _ctx.ns.bm(\"picker\", _ctx.colorSize)]),\n      role: \"button\",\n      \"aria-label\": _ctx.buttonAriaLabel,\n      \"aria-labelledby\": _ctx.buttonAriaLabelledby,\n      \"aria-description\": _ctx.t(\"el.colorpicker.description\", {\n        color: _ctx.modelValue || \"\"\n      }),\n      tabindex: _ctx.tabindex,\n      onKeydown: _cache[2] || (_cache[2] = withKeys((...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args), [\"enter\"]))\n    }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"mask\"))\n    }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"trigger\")),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleTrigger && _ctx.handleTrigger(...args))\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"color\"), _ctx.ns.is(\"alpha\", _ctx.showAlpha)])\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass(_ctx.ns.be(\"picker\", \"color-inner\")),\n      style: normalizeStyle({\n        backgroundColor: _ctx.displayedColor\n      })\n    }, [withDirectives(createVNode(_component_el_icon, {\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"icon\"), _ctx.ns.is(\"icon-arrow-down\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_arrow_down)]),\n      _: 1\n    }, 8, [\"class\"]), [[vShow, _ctx.modelValue || _ctx.showPanelColor]]), !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass([_ctx.ns.be(\"picker\", \"empty\"), _ctx.ns.is(\"icon-close\")])\n    }, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 42, _hoisted_1)]),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\"]);\n}\n\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/index.vue\"]]);\n\nexport { ColorPicker as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElButton","ElTooltip","ElInput","ElIcon","Close","ArrowDown","SvPanel","HueSlider","AlphaSlider","Predefine","directives","ClickOutside","props","modelValue","id","showAlpha","colorFormat","disabled","size","type","validator","popperClass","label","default","tabindex","String","Number","predefine","validateEvent","emits","UPDATE_MODEL_EVENT","setup","emit","t","useLocale","useNamespace","form","formItem","useFormItem","inputId","buttonId","isLabeledByFormItem","useFormItemInputId","formItemContext","hue","ref","svPanel","alpha","shouldActiveChange","reactive","Color","enableAlpha","format","value","computed","showPanelColor","color","colorSize","useSize","watch","newVal","fromString","currentColor","val","customInput","color2","TypeError","r","g","b","toRgb","get","showPicker","debounce","debounceSetShowPicker","resetColor","nextTick","colorDisabled","validate","catch","err","compare","newColor","onMounted","_a","_b","_c","provide","displayedColor","buttonAriaLabel","buttonAriaLabelledby","handleConfirm","hide","handleTrigger","clear","confirmValue","ns","popper","_openBlock","visible","offset","effect","trigger","transition","persistent","content","_createElementVNode","class","vertical","_createVNode","_ctx","key","_createCommentVNode","colors","_cache","onKeyup","onBlur","text","onClick","_createTextVNode","plain","is","role","onKeydown","style","backgroundColor","_withDirectives"],"sources":["../../../../../../packages/components/color-picker/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    :visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            text\n            size=\"small\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :id=\"buttonId\"\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n        role=\"button\"\n        :aria-label=\"buttonAriaLabel\"\n        :aria-labelledby=\"buttonAriaLabelledby\"\n        :aria-description=\"\n          t('el.colorpicker.description', { color: modelValue || '' })\n        \"\n        :tabindex=\"tabindex\"\n        @keydown.enter=\"handleTrigger\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\" />\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { ClickOutside } from '@element-plus/directives'\nimport {\n  useFormItem,\n  useFormItemInputId,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElInput from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn, isValidComponentSize } from '@element-plus/utils'\nimport { ArrowDown, Close } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './color'\nimport { OPTIONS_KEY } from './useOption'\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { IUseOptions } from './useOption'\n\nexport default defineComponent({\n  name: 'ElColorPicker',\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine,\n  },\n  directives: {\n    ClickOutside,\n  },\n  props: {\n    modelValue: String,\n    id: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    popperClass: String,\n    label: {\n      type: String,\n      default: undefined,\n    },\n    tabindex: {\n      type: [String, Number],\n      default: 0,\n    },\n    predefine: Array,\n    validateEvent: {\n      type: Boolean,\n      default: true,\n    },\n  },\n  emits: ['change', 'active-change', UPDATE_MODEL_EVENT],\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('color')\n    const { form, formItem } = useFormItem()\n\n    const { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(\n      props,\n      {\n        formItemContext: formItem,\n      }\n    )\n\n    const hue = ref<InstanceType<typeof HueSlider>>()\n    const svPanel = ref<InstanceType<typeof SvPanel>>()\n    const alpha = ref<InstanceType<typeof AlphaSlider>>()\n    const popper = ref(null)\n    // active-change is used to prevent modelValue changes from triggering.\n    let shouldActiveChange = true\n    // data\n    const color = reactive(\n      new Color({\n        enableAlpha: props.showAlpha,\n        format: props.colorFormat || '',\n        value: props.modelValue,\n      })\n    )\n    type ColorType = typeof color\n    const showPicker = ref(false)\n    const showPanelColor = ref(false)\n    const customInput = ref('')\n    // computed\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return 'transparent'\n      }\n      return displayedRgb(color, props.showAlpha)\n    })\n    const colorSize = useSize()\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || form?.disabled)\n    })\n\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? '' : color.value\n    })\n    const buttonAriaLabel = computed<string | undefined>(() => {\n      return !isLabeledByFormItem.value\n        ? props.label || t('el.colorpicker.defaultLabel')\n        : undefined\n    })\n    const buttonAriaLabelledby = computed<string | undefined>(() => {\n      return isLabeledByFormItem.value ? formItem?.labelId : undefined\n    })\n    // watch\n    watch(\n      () => props.modelValue,\n      (newVal) => {\n        if (!newVal) {\n          showPanelColor.value = false\n        } else if (newVal && newVal !== color.value) {\n          shouldActiveChange = false\n          color.fromString(newVal)\n        }\n      }\n    )\n    watch(\n      () => currentColor.value,\n      (val) => {\n        customInput.value = val\n        shouldActiveChange && emit('active-change', val)\n        shouldActiveChange = true\n      }\n    )\n\n    watch(\n      () => color.value,\n      () => {\n        if (!props.modelValue && !showPanelColor.value) {\n          showPanelColor.value = true\n        }\n      }\n    )\n\n    // methods\n    function displayedRgb(color: ColorType, showAlpha: boolean) {\n      if (!(color instanceof Color)) {\n        throw new TypeError('color should be instance of _color Class')\n      }\n\n      const { r, g, b } = color.toRgb()\n      return showAlpha\n        ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n        : `rgb(${r}, ${g}, ${b})`\n    }\n\n    function setShowPicker(value: boolean) {\n      showPicker.value = value\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100)\n\n    function hide() {\n      debounceSetShowPicker(false)\n      resetColor()\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue)\n        } else {\n          color.value = ''\n          nextTick(() => {\n            showPanelColor.value = false\n          })\n        }\n      })\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return\n      debounceSetShowPicker(!showPicker.value)\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value)\n    }\n\n    function confirmValue() {\n      const value = color.value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('change', value)\n      if (props.validateEvent) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n      debounceSetShowPicker(false)\n      // check if modelValue change, if not change, then reset color.\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat || '',\n          value: props.modelValue,\n        })\n        if (!color.compare(newColor)) {\n          resetColor()\n        }\n      })\n    }\n\n    function clear() {\n      debounceSetShowPicker(false)\n      emit(UPDATE_MODEL_EVENT, null)\n      emit('change', null)\n      if (props.modelValue !== null && props.validateEvent) {\n        formItem?.validate('change').catch((err) => debugWarn(err))\n      }\n      resetColor()\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value\n      }\n    })\n    watch(\n      () => showPicker.value,\n      () => {\n        nextTick(() => {\n          hue.value?.update()\n          svPanel.value?.update()\n          alpha.value?.update()\n        })\n      }\n    )\n\n    provide<IUseOptions>(OPTIONS_KEY, {\n      currentColor,\n    })\n\n    return {\n      color: color as Color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      buttonId,\n      buttonAriaLabel,\n      buttonAriaLabelledby,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}