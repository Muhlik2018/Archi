{"ast":null,"code":"import '../../../../utils/index.mjs';\nimport Node from './node.mjs';\nimport { getNodeKey } from './util.mjs';\nimport { hasOwn, isObject } from '@vue/shared';\n\nclass TreeStore {\n  constructor(options) {\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this\n    });\n    this.root.initialize();\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load;\n      loadFn(this.root, data => {\n        this.root.doCreateChildren(data);\n\n        this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  filter(value) {\n    const filterNodeMethod = this.filterNodeMethod;\n    const lazy = this.lazy;\n\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n        traverse(child);\n      });\n\n      if (!node.visible && childNodes.length) {\n        let allHidden = true;\n        allHidden = !childNodes.some(child => child.visible);\n\n        if (node.root) {\n          ;\n          node.root.visible = allHidden === false;\n        } else {\n          ;\n          node.visible = allHidden === false;\n        }\n      }\n\n      if (!value) return;\n      if (node.visible && !node.isLeaf && !lazy) node.expand();\n    };\n\n    traverse(this);\n  }\n\n  setData(newVal) {\n    const instanceChanged = newVal !== this.root.data;\n\n    if (instanceChanged) {\n      this.root.setData(newVal);\n\n      this._initDefaultCheckedNodes();\n    } else {\n      this.root.updateChildren();\n    }\n  }\n\n  getNode(data) {\n    if (data instanceof Node) return data;\n    const key = isObject(data) ? getNodeKey(this.key, data) : data;\n    return this.nodesMap[key] || null;\n  }\n\n  insertBefore(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertBefore({\n      data\n    }, refNode);\n  }\n\n  insertAfter(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertAfter({\n      data\n    }, refNode);\n  }\n\n  remove(data) {\n    const node = this.getNode(data);\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null;\n      }\n\n      node.parent.removeChild(node);\n    }\n  }\n\n  append(data, parentData) {\n    const parentNode = parentData ? this.getNode(parentData) : this.root;\n\n    if (parentNode) {\n      parentNode.insertChild({\n        data\n      });\n    }\n  }\n\n  _initDefaultCheckedNodes() {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    const nodesMap = this.nodesMap;\n    defaultCheckedKeys.forEach(checkedKey => {\n      const node = nodesMap[checkedKey];\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    });\n  }\n\n  _initDefaultCheckedNode(node) {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  }\n\n  setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  registerNode(node) {\n    const key = this.key;\n    if (!node || !node.data) return;\n\n    if (!key) {\n      this.nodesMap[node.id] = node;\n    } else {\n      const nodeKey = node.key;\n      if (nodeKey !== void 0) this.nodesMap[node.key] = node;\n    }\n  }\n\n  deregisterNode(node) {\n    const key = this.key;\n    if (!key || !node || !node.data) return;\n    node.childNodes.forEach(child => {\n      this.deregisterNode(child);\n    });\n    delete this.nodesMap[node.key];\n  }\n\n  getCheckedNodes(leafOnly = false, includeHalfChecked = false) {\n    const checkedNodes = [];\n\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n          checkedNodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n    return checkedNodes;\n  }\n\n  getCheckedKeys(leafOnly = false) {\n    return this.getCheckedNodes(leafOnly).map(data => (data || {})[this.key]);\n  }\n\n  getHalfCheckedNodes() {\n    const nodes = [];\n\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        if (child.indeterminate) {\n          nodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n    return nodes;\n  }\n\n  getHalfCheckedKeys() {\n    return this.getHalfCheckedNodes().map(data => (data || {})[this.key]);\n  }\n\n  _getAllNodes() {\n    const allNodes = [];\n    const nodesMap = this.nodesMap;\n\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n\n    return allNodes;\n  }\n\n  updateChildren(key, data) {\n    const node = this.nodesMap[key];\n    if (!node) return;\n    const childNodes = node.childNodes;\n\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i];\n      this.remove(child.data);\n    }\n\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i];\n      this.append(child, node.data);\n    }\n  }\n\n  _setCheckedKeys(key, leafOnly = false, checkedKeys) {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level);\n\n    const cache = /* @__PURE__ */Object.create(null);\n    const keys = Object.keys(checkedKeys);\n    allNodes.forEach(node => node.setChecked(false, false));\n\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i];\n      const nodeKey = node.data[key].toString();\n      const checked = keys.includes(nodeKey);\n\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false);\n        }\n\n        continue;\n      }\n\n      let parent = node.parent;\n\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true;\n        parent = parent.parent;\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false);\n        continue;\n      }\n\n      node.setChecked(true, true);\n\n      if (leafOnly) {\n        node.setChecked(false, false);\n\n        const traverse = function (node2) {\n          const childNodes = node2.childNodes;\n          childNodes.forEach(child => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false);\n            }\n\n            traverse(child);\n          });\n        };\n\n        traverse(node);\n      }\n    }\n  }\n\n  setCheckedNodes(array, leafOnly = false) {\n    const key = this.key;\n    const checkedKeys = {};\n    array.forEach(item => {\n      checkedKeys[(item || {})[key]] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n\n  setCheckedKeys(keys, leafOnly = false) {\n    this.defaultCheckedKeys = keys;\n    const key = this.key;\n    const checkedKeys = {};\n    keys.forEach(key2 => {\n      checkedKeys[key2] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n\n  setDefaultExpandedKeys(keys) {\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n    keys.forEach(key => {\n      const node = this.getNode(key);\n      if (node) node.expand(null, this.autoExpandParent);\n    });\n  }\n\n  setChecked(data, checked, deep) {\n    const node = this.getNode(data);\n\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  }\n\n  getCurrentNode() {\n    return this.currentNode;\n  }\n\n  setCurrentNode(currentNode) {\n    const prevCurrentNode = this.currentNode;\n\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false;\n    }\n\n    this.currentNode = currentNode;\n    this.currentNode.isCurrent = true;\n  }\n\n  setUserCurrentNode(node, shouldAutoExpandParent = true) {\n    const key = node[this.key];\n    const currNode = this.nodesMap[key];\n    this.setCurrentNode(currNode);\n\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true);\n    }\n  }\n\n  setCurrentNodeKey(key, shouldAutoExpandParent = true) {\n    if (key === null || key === void 0) {\n      this.currentNode && (this.currentNode.isCurrent = false);\n      this.currentNode = null;\n      return;\n    }\n\n    const node = this.getNode(key);\n\n    if (node) {\n      this.setCurrentNode(node);\n\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }\n\n}\n\nexport { TreeStore as default };","map":{"version":3,"mappings":"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","names":["TreeStore","constructor","options","currentNode","currentNodeKey","option","hasOwn","nodesMap","initialize","root","Node","data","store","lazy","load","loadFn","doCreateChildren","_initDefaultCheckedNodes","filter","value","filterNodeMethod","traverse","node","childNodes","forEach","child","visible","call","length","allHidden","some","isLeaf","expand","setData","newVal","instanceChanged","updateChildren","getNode","key","isObject","getNodeKey","insertBefore","refData","refNode","parent","insertAfter","remove","removeChild","append","parentData","parentNode","insertChild","defaultCheckedKeys","checkedKey","setChecked","checkStrictly","_initDefaultCheckedNode","includes","setDefaultCheckedKey","registerNode","id","nodeKey","deregisterNode","getCheckedNodes","leafOnly","includeHalfChecked","checkedNodes","checked","indeterminate","push","getCheckedKeys","map","getHalfCheckedNodes","nodes","getHalfCheckedKeys","_getAllNodes","allNodes","i","j","_setCheckedKeys","checkedKeys","sort","a","b","level","cache","Object","create","keys","toString","node2","setCheckedNodes","array","item","setCheckedKeys","key2","setDefaultExpandedKeys","defaultExpandedKeys","autoExpandParent","deep","getCurrentNode","setCurrentNode","prevCurrentNode","isCurrent","setUserCurrentNode","shouldAutoExpandParent","currNode","setCurrentNodeKey"],"sources":["../../../../../../../packages/components/tree/src/model/tree-store.ts"],"sourcesContent":["// @ts-nocheck\nimport { hasOwn, isObject } from '@element-plus/utils'\nimport Node from './node'\nimport { getNodeKey } from './util'\n\nimport type {\n  FilterNodeMethodFunction,\n  FilterValue,\n  LoadFunction,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n  TreeOptionProps,\n  TreeStoreNodesMap,\n  TreeStoreOptions,\n} from '../tree.type'\n\nexport default class TreeStore {\n  currentNode: Node\n  currentNodeKey: TreeKey\n  nodesMap: TreeStoreNodesMap\n  root: Node\n  data: TreeData\n  lazy: boolean\n  load: LoadFunction\n  filterNodeMethod: FilterNodeMethodFunction\n  key: TreeKey\n  defaultCheckedKeys: TreeKey[]\n  checkStrictly: boolean\n  defaultExpandedKeys: TreeKey[]\n  autoExpandParent: boolean\n  defaultExpandAll: boolean\n  checkDescendants: boolean\n  props: TreeOptionProps\n\n  constructor(options: TreeStoreOptions) {\n    this.currentNode = null\n    this.currentNodeKey = null\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n\n    this.nodesMap = {}\n  }\n\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this,\n    })\n    this.root.initialize()\n\n    if (this.lazy && this.load) {\n      const loadFn = this.load\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data)\n        this._initDefaultCheckedNodes()\n      })\n    } else {\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  filter(value: FilterValue): void {\n    const filterNodeMethod = this.filterNodeMethod\n    const lazy = this.lazy\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child)\n\n        traverse(child)\n      })\n\n      if (!(node as Node).visible && childNodes.length) {\n        let allHidden = true\n        allHidden = !childNodes.some((child) => child.visible)\n\n        if ((node as TreeStore).root) {\n          ;(node as TreeStore).root.visible = allHidden === false\n        } else {\n          ;(node as Node).visible = allHidden === false\n        }\n      }\n      if (!value) return\n\n      if ((node as Node).visible && !(node as Node).isLeaf && !lazy)\n        (node as Node).expand()\n    }\n\n    traverse(this)\n  }\n\n  setData(newVal: TreeData): void {\n    const instanceChanged = newVal !== this.root.data\n    if (instanceChanged) {\n      this.root.setData(newVal)\n      this._initDefaultCheckedNodes()\n    } else {\n      this.root.updateChildren()\n    }\n  }\n\n  getNode(data: TreeKey | TreeNodeData): Node {\n    if (data instanceof Node) return data\n    const key = isObject(data) ? getNodeKey(this.key, data) : data\n    return this.nodesMap[key] || null\n  }\n\n  insertBefore(data: TreeNodeData, refData: TreeKey | TreeNodeData): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertBefore({ data }, refNode)\n  }\n\n  insertAfter(data: TreeNodeData, refData: TreeKey | TreeNodeData): void {\n    const refNode = this.getNode(refData)\n    refNode.parent.insertAfter({ data }, refNode)\n  }\n\n  remove(data: TreeNodeData | Node): void {\n    const node = this.getNode(data)\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null\n      }\n      node.parent.removeChild(node)\n    }\n  }\n\n  append(data: TreeNodeData, parentData: TreeNodeData | TreeKey | Node): void {\n    const parentNode = parentData ? this.getNode(parentData) : this.root\n\n    if (parentNode) {\n      parentNode.insertChild({ data })\n    }\n  }\n\n  _initDefaultCheckedNodes(): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n    const nodesMap = this.nodesMap\n\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey]\n\n      if (node) {\n        node.setChecked(true, !this.checkStrictly)\n      }\n    })\n  }\n\n  _initDefaultCheckedNode(node: Node): void {\n    const defaultCheckedKeys = this.defaultCheckedKeys || []\n\n    if (defaultCheckedKeys.includes(node.key)) {\n      node.setChecked(true, !this.checkStrictly)\n    }\n  }\n\n  setDefaultCheckedKey(newVal: TreeKey[]): void {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal\n      this._initDefaultCheckedNodes()\n    }\n  }\n\n  registerNode(node: Node): void {\n    const key = this.key\n    if (!node || !node.data) return\n\n    if (!key) {\n      this.nodesMap[node.id] = node\n    } else {\n      const nodeKey = node.key\n      if (nodeKey !== undefined) this.nodesMap[node.key] = node\n    }\n  }\n\n  deregisterNode(node: Node): void {\n    const key = this.key\n    if (!key || !node || !node.data) return\n\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child)\n    })\n\n    delete this.nodesMap[node.key]\n  }\n\n  getCheckedNodes(\n    leafOnly = false,\n    includeHalfChecked = false\n  ): TreeNodeData[] {\n    const checkedNodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (\n          (child.checked || (includeHalfChecked && child.indeterminate)) &&\n          (!leafOnly || (leafOnly && child.isLeaf))\n        ) {\n          checkedNodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return checkedNodes\n  }\n\n  getCheckedKeys(leafOnly = false): TreeKey[] {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key])\n  }\n\n  getHalfCheckedNodes(): TreeNodeData[] {\n    const nodes: TreeNodeData[] = []\n    const traverse = function (node: TreeStore | Node) {\n      const childNodes = (node as TreeStore).root\n        ? (node as TreeStore).root.childNodes\n        : (node as Node).childNodes\n\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data)\n        }\n\n        traverse(child)\n      })\n    }\n\n    traverse(this)\n\n    return nodes\n  }\n\n  getHalfCheckedKeys(): TreeKey[] {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key])\n  }\n\n  _getAllNodes(): Node[] {\n    const allNodes: Node[] = []\n    const nodesMap = this.nodesMap\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey])\n      }\n    }\n\n    return allNodes\n  }\n\n  updateChildren(key: TreeKey, data: TreeData): void {\n    const node = this.nodesMap[key]\n    if (!node) return\n    const childNodes = node.childNodes\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i]\n      this.remove(child.data)\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i]\n      this.append(child, node.data)\n    }\n  }\n\n  _setCheckedKeys(\n    key: TreeKey,\n    leafOnly = false,\n    checkedKeys: { [key: string]: boolean }\n  ): void {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level)\n    const cache = Object.create(null)\n    const keys = Object.keys(checkedKeys)\n    allNodes.forEach((node) => node.setChecked(false, false))\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i]\n      const nodeKey = node.data[key].toString()\n      const checked = keys.includes(nodeKey)\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false)\n        }\n        continue\n      }\n\n      let parent = node.parent\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true\n        parent = parent.parent\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false)\n        continue\n      }\n      node.setChecked(true, true)\n\n      if (leafOnly) {\n        node.setChecked(false, false)\n        const traverse = function (node: Node): void {\n          const childNodes = node.childNodes\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false)\n            }\n            traverse(child)\n          })\n        }\n        traverse(node)\n      }\n    }\n  }\n\n  setCheckedNodes(array: Node[], leafOnly = false): void {\n    const key = this.key\n    const checkedKeys = {}\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setCheckedKeys(keys: TreeKey[], leafOnly = false): void {\n    this.defaultCheckedKeys = keys\n    const key = this.key\n    const checkedKeys = {}\n    keys.forEach((key) => {\n      checkedKeys[key] = true\n    })\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys)\n  }\n\n  setDefaultExpandedKeys(keys: TreeKey[]) {\n    keys = keys || []\n    this.defaultExpandedKeys = keys\n    keys.forEach((key) => {\n      const node = this.getNode(key)\n      if (node) node.expand(null, this.autoExpandParent)\n    })\n  }\n\n  setChecked(\n    data: TreeKey | TreeNodeData,\n    checked: boolean,\n    deep: boolean\n  ): void {\n    const node = this.getNode(data)\n\n    if (node) {\n      node.setChecked(!!checked, deep)\n    }\n  }\n\n  getCurrentNode(): Node {\n    return this.currentNode\n  }\n\n  setCurrentNode(currentNode: Node): void {\n    const prevCurrentNode = this.currentNode\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false\n    }\n    this.currentNode = currentNode\n    this.currentNode.isCurrent = true\n  }\n\n  setUserCurrentNode(node: Node, shouldAutoExpandParent = true): void {\n    const key = node[this.key]\n    const currNode = this.nodesMap[key]\n    this.setCurrentNode(currNode)\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true)\n    }\n  }\n\n  setCurrentNodeKey(key: TreeKey, shouldAutoExpandParent = true): void {\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false)\n      this.currentNode = null\n      return\n    }\n    const node = this.getNode(key)\n    if (node) {\n      this.setCurrentNode(node)\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true)\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}