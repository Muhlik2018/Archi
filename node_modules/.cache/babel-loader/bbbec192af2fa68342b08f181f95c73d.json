{"ast":null,"code":"import { defineComponent, ref, computed, nextTick, watch, onMounted, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { debounce } from 'lodash-unified';\nimport { isClient, useResizeObserver } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, Check, ArrowDown } from '@element-plus/icons-vue';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { CommonProps } from '../../cascader-panel/src/config.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { tagProps } from '../../tag/src/tag.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst DEFAULT_INPUT_HEIGHT = 40;\nconst INPUT_HEIGHT_MAP = {\n  large: 36,\n  default: 32,\n  small: 28\n};\nconst popperOptions = {\n  modifiers: [{\n    name: \"arrowPosition\",\n    enabled: true,\n    phase: \"main\",\n    fn: ({\n      state\n    }) => {\n      const {\n        modifiersData,\n        placement\n      } = state;\n      if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n      modifiersData.arrow.x = 35;\n    },\n    requires: [\"arrow\"]\n  }]\n};\nconst COMPONENT_NAME = \"ElCascader\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElCascaderPanel: _CascaderPanel,\n    ElInput,\n    ElTooltip,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown\n  },\n  directives: {\n    Clickoutside: ClickOutside\n  },\n  props: { ...CommonProps,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    placeholder: {\n      type: String\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function,\n      default: (node, keyword) => node.text.includes(keyword)\n    },\n    separator: {\n      type: String,\n      default: \" / \"\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    collapseTagsTooltip: {\n      type: Boolean,\n      default: false\n    },\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: () => true\n    },\n    popperClass: {\n      type: String,\n      default: \"\"\n    },\n    teleported: useTooltipContentProps.teleported,\n    tagType: { ...tagProps.type,\n      default: \"info\"\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"focus\", \"blur\", \"visible-change\", \"expand-change\", \"remove-tag\"],\n\n  setup(props, {\n    emit\n  }) {\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const panel = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const isDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const realSize = useSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n\n      return ((_a = panel.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \" \" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n        }\n      }\n\n    });\n    const popperPaneRef = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = panel.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          const {\n            value\n          } = presentText;\n          inputValue.value = value;\n          searchInputValue.value = value;\n        }\n\n        emit(\"visible-change\", visible);\n      }\n    };\n\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n\n    const deleteTag = tag => {\n      var _a;\n\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = panel.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"remove-tag\", node.valueByOption);\n    };\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n\n      presentTags.value = tags;\n    };\n\n    const calculateSuggestions = () => {\n      var _a, _b;\n\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = panel.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n\n    const focusFirstNode = () => {\n      var _a;\n\n      let firstNode;\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = panel.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n\n    const updateStyle = () => {\n      var _a, _b;\n\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n\n    const getCheckedNodes = leafOnly => {\n      var _a;\n\n      return (_a = panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expand-change\", value);\n    };\n\n    const handleComposition = event => {\n      var _a;\n\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n\n          break;\n\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n\n    const handleClear = () => {\n      var _a;\n\n      (_a = panel.value) == null ? void 0 : _a.clearCheckedNodes();\n      togglePopperVisible(false);\n    };\n\n    const handleSuggestionClick = node => {\n      var _a, _b;\n\n      const {\n        checked\n      } = node;\n\n      if (multiple.value) {\n        (_a = panel.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount) return;\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, val => inputValue.value = val, {\n      immediate: true\n    });\n    onMounted(() => {\n      var _a;\n\n      const inputEl = (_a = input.value) == null ? void 0 : _a.$el;\n      inputInitialHeight = (inputEl == null ? void 0 : inputEl.offsetHeight) || INPUT_HEIGHT_MAP[realSize.value] || DEFAULT_INPUT_HEIGHT;\n      useResizeObserver(inputEl, updateStyle);\n    });\n    return {\n      popperOptions,\n      tooltipRef,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      allPresentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n      nsCascader,\n      nsInput,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"placeholder\"];\nconst _hoisted_3 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_circle_close = resolveComponent(\"circle-close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_tag = resolveComponent(\"el-tag\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  const _component_el_cascader_panel = resolveComponent(\"el-cascader-panel\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  const _directive_clickoutside = resolveDirective(\"clickoutside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"tooltipRef\",\n    visible: _ctx.popperVisible,\n    teleported: _ctx.teleported,\n    \"popper-class\": [_ctx.nsCascader.e(\"dropdown\"), _ctx.popperClass],\n    \"popper-options\": _ctx.popperOptions,\n    \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n    \"stop-popper-mouse-event\": false,\n    \"gpu-acceleration\": false,\n    placement: \"bottom-start\",\n    transition: `${_ctx.nsCascader.namespace.value}-zoom-in-top`,\n    effect: \"light\",\n    pure: \"\",\n    persistent: \"\",\n    onHide: _ctx.hideSuggestionPanel\n  }, {\n    default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n      class: normalizeClass([_ctx.nsCascader.b(), _ctx.nsCascader.m(_ctx.realSize), _ctx.nsCascader.is(\"disabled\", _ctx.isDisabled), _ctx.$attrs.class]),\n      style: normalizeStyle(_ctx.$attrs.style),\n      onClick: _cache[11] || (_cache[11] = () => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),\n      onKeydown: _cache[12] || (_cache[12] = (...args) => _ctx.handleKeyDown && _ctx.handleKeyDown(...args)),\n      onMouseenter: _cache[13] || (_cache[13] = $event => _ctx.inputHover = true),\n      onMouseleave: _cache[14] || (_cache[14] = $event => _ctx.inputHover = false)\n    }, [createVNode(_component_el_input, {\n      ref: \"input\",\n      modelValue: _ctx.inputValue,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.inputValue = $event),\n      placeholder: _ctx.searchInputValue ? \"\" : _ctx.inputPlaceholder,\n      readonly: _ctx.readonly,\n      disabled: _ctx.isDisabled,\n      \"validate-event\": false,\n      size: _ctx.realSize,\n      class: normalizeClass(_ctx.nsCascader.is(\"focus\", _ctx.popperVisible)),\n      onCompositionstart: _ctx.handleComposition,\n      onCompositionupdate: _ctx.handleComposition,\n      onCompositionend: _ctx.handleComposition,\n      onFocus: _cache[2] || (_cache[2] = e => _ctx.$emit(\"focus\", e)),\n      onBlur: _cache[3] || (_cache[3] = e => _ctx.$emit(\"blur\", e)),\n      onInput: _ctx.handleInput\n    }, {\n      suffix: withCtx(() => [_ctx.clearBtnVisible ? (openBlock(), createBlock(_component_el_icon, {\n        key: \"clear\",\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), \"icon-circle-close\"]),\n        onClick: withModifiers(_ctx.handleClear, [\"stop\"])\n      }, {\n        default: withCtx(() => [createVNode(_component_circle_close)]),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(_component_el_icon, {\n        key: \"arrow-down\",\n        class: normalizeClass([_ctx.nsInput.e(\"icon\"), \"icon-arrow-down\", _ctx.nsCascader.is(\"reverse\", _ctx.popperVisible)]),\n        onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.togglePopperVisible(), [\"stop\"]))\n      }, {\n        default: withCtx(() => [createVNode(_component_arrow_down)]),\n        _: 1\n      }, 8, [\"class\"]))]),\n      _: 1\n    }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\", \"onInput\"]), _ctx.multiple ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      ref: \"tagWrapper\",\n      class: normalizeClass(_ctx.nsCascader.e(\"tags\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.presentTags, tag => {\n      return openBlock(), createBlock(_component_el_tag, {\n        key: tag.key,\n        type: _ctx.tagType,\n        size: _ctx.tagSize,\n        hit: tag.hitState,\n        closable: tag.closable,\n        \"disable-transitions\": \"\",\n        onClose: $event => _ctx.deleteTag(tag)\n      }, {\n        default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(_component_el_tooltip, {\n          key: 1,\n          teleported: false,\n          disabled: _ctx.popperVisible || !_ctx.collapseTagsTooltip,\n          \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n          placement: \"bottom\",\n          effect: \"light\"\n        }, {\n          default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n          content: withCtx(() => [createElementVNode(\"div\", {\n            class: normalizeClass(_ctx.nsCascader.e(\"collapse-tags\"))\n          }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.allPresentTags, (tag2, idx) => {\n            return openBlock(), createElementBlock(\"div\", {\n              key: idx,\n              class: normalizeClass(_ctx.nsCascader.e(\"collapse-tag\"))\n            }, [(openBlock(), createBlock(_component_el_tag, {\n              key: tag2.key,\n              class: \"in-tooltip\",\n              type: _ctx.tagType,\n              size: _ctx.tagSize,\n              hit: tag2.hitState,\n              closable: tag2.closable,\n              \"disable-transitions\": \"\",\n              onClose: $event => _ctx.deleteTag(tag2)\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n              _: 2\n            }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))], 2);\n          }), 128))], 2)]),\n          _: 2\n        }, 1032, [\"disabled\"]))]),\n        _: 2\n      }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n    }), 128)), _ctx.filterable && !_ctx.isDisabled ? withDirectives((openBlock(), createElementBlock(\"input\", {\n      key: 0,\n      \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.searchInputValue = $event),\n      type: \"text\",\n      class: normalizeClass(_ctx.nsCascader.e(\"search-input\")),\n      placeholder: _ctx.presentText ? \"\" : _ctx.inputPlaceholder,\n      onInput: _cache[5] || (_cache[5] = e => _ctx.handleInput(_ctx.searchInputValue, e)),\n      onClick: _cache[6] || (_cache[6] = withModifiers($event => _ctx.togglePopperVisible(true), [\"stop\"])),\n      onKeydown: _cache[7] || (_cache[7] = withKeys((...args) => _ctx.handleDelete && _ctx.handleDelete(...args), [\"delete\"])),\n      onCompositionstart: _cache[8] || (_cache[8] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionupdate: _cache[9] || (_cache[9] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n      onCompositionend: _cache[10] || (_cache[10] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args))\n    }, null, 42, _hoisted_2)), [[vModelText, _ctx.searchInputValue]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 38)), [[_directive_clickoutside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]])]),\n    content: withCtx(() => [withDirectives(createVNode(_component_el_cascader_panel, {\n      ref: \"panel\",\n      modelValue: _ctx.checkedValue,\n      \"onUpdate:modelValue\": _cache[15] || (_cache[15] = $event => _ctx.checkedValue = $event),\n      options: _ctx.options,\n      props: _ctx.props,\n      border: false,\n      \"render-label\": _ctx.$slots.default,\n      onExpandChange: _ctx.handleExpandChange,\n      onClose: _cache[16] || (_cache[16] = $event => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))\n    }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\", \"onExpandChange\"]), [[vShow, !_ctx.filtering]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(_component_el_scrollbar, {\n      key: 0,\n      ref: \"suggestionPanel\",\n      tag: \"ul\",\n      class: normalizeClass(_ctx.nsCascader.e(\"suggestion-panel\")),\n      \"view-class\": _ctx.nsCascader.e(\"suggestion-list\"),\n      onKeydown: _ctx.handleSuggestionKeyDown\n    }, {\n      default: withCtx(() => [_ctx.suggestions.length ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(_ctx.suggestions, item => {\n        return openBlock(), createElementBlock(\"li\", {\n          key: item.uid,\n          class: normalizeClass([_ctx.nsCascader.e(\"suggestion-item\"), _ctx.nsCascader.is(\"checked\", item.checked)]),\n          tabindex: -1,\n          onClick: $event => _ctx.handleSuggestionClick(item)\n        }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(_component_el_icon, {\n          key: 0\n        }, {\n          default: withCtx(() => [createVNode(_component_check)]),\n          _: 1\n        })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n      }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n        key: 1\n      }, () => [createElementVNode(\"li\", {\n        class: normalizeClass(_ctx.nsCascader.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noMatch\")), 3)])]),\n      _: 3\n    }, 8, [\"class\", \"view-class\", \"onKeydown\"])), [[vShow, _ctx.filtering]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"visible\", \"teleported\", \"popper-class\", \"popper-options\", \"transition\", \"onHide\"]);\n}\n\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/index.vue\"]]);\n\nexport { Cascader as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_INPUT_HEIGHT","INPUT_HEIGHT_MAP","large","default","small","popperOptions","modifiers","name","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","COMPONENT_NAME","_sfc_main","defineComponent","components","ElCascaderPanel","ElInput","ElTooltip","ElScrollbar","ElTag","ElIcon","CircleClose","Check","ArrowDown","directives","Clickoutside","props","CommonProps","size","type","validator","placeholder","disabled","clearable","filterable","filterMethod","node","keyword","separator","showAllLevels","collapseTags","collapseTagsTooltip","debounce","beforeFilter","popperClass","teleported","useTooltipContentProps","tagType","tagProps","validateEvent","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","inputInitialHeight","pressDeleteCount","useNamespace","t","useLocale","form","formItem","useFormItem","ref","isDisabled","computed","inputPlaceholder","realSize","useSize","multiple","readonly","value","searchInputValue","inputValue","checkedNodes","panel","_a","length","nodes","get","set","_b","visible","popperVisible","input","updatePopperPosition","nextTick","filtering","genTag","key","text","hitState","closable","isCollapseTag","deleteTag","allTags","allPresentTags","restCount","tags","rest","presentTags","calculateSuggestions","forEach","tag","suggestions","res","firstNode","$el","querySelector","suggestionPanelEl","suggestionList","minWidth","inputInner","offsetHeight","handleComposition","isOnComposition","e","togglePopperVisible","EVENT_CODE","esc","checked","code","focusNode","target","handleDelete","lastTag","searchKeyword","passed","catch","hideSuggestionPanel","val","watch","immediate","onMounted","useResizeObserver","tooltipRef","popperPaneRef","tagWrapper","suggestionPanel","inputHover","presentText","checkedValue","tagSize","clearBtnVisible","nsCascader","nsInput","_hoisted_1","_hoisted_2","_hoisted_3","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_circle_close","_component_el_icon","_directive_clickoutside","_openBlock","transition","effect","pure","persistent","onHide","_withDirectives","class","m","is","style","onClick","onKeydown","onMouseenter","onMouseleave","$event","_createVNode","modelValue","onCompositionstart","onFocus","onBlur","onInput","_withCtx","_","_createElementBlock","hit","onClose","content","_createElementVNode","onCompositionupdate","onCompositionend","_createCommentVNode","options","_normalizeClass","item","tabindex"],"sources":["../../../../../../packages/components/cascader/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[popperPaneRef]=\"() => togglePopperVisible(false)\"\n        :class=\"[\n          nsCascader.b(),\n          nsCascader.m(realSize),\n          nsCascader.is('disabled', isDisabled),\n          $attrs.class,\n        ]\"\n        :style=\"$attrs.style\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"searchInputValue ? '' : inputPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"nsCascader.is('focus', popperVisible)\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"(e) => $emit('focus', e)\"\n          @blur=\"(e) => $emit('blur', e)\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"[\n                nsInput.e('icon'),\n                'icon-arrow-down',\n                nsCascader.is('reverse', popperVisible),\n              ]\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" :class=\"nsCascader.e('tags')\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :teleported=\"false\"\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"panel\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport { computed, defineComponent, nextTick, onMounted, ref, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { debounce } from 'lodash-unified'\n\nimport { isClient, useResizeObserver } from '@vueuse/core'\nimport ElCascaderPanel, {\n  CommonProps,\n} from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip, {\n  useTooltipContentProps,\n} from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag, { tagProps } from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\n\nimport { ClickOutside as Clickoutside } from '@element-plus/directives'\nimport {\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\n\nimport {\n  debugWarn,\n  focusNode,\n  getSibling,\n  isKorean,\n  isValidComponentSize,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type {\n  CascaderNode,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\nimport type { ComponentSize } from '@element-plus/constants'\n\ntype cascaderPanelType = InstanceType<typeof ElCascaderPanel>\ntype tooltipType = InstanceType<typeof ElTooltip>\ntype inputType = InstanceType<typeof ElInput>\ntype suggestionPanelType = InstanceType<typeof ElScrollbar>\n\nconst DEFAULT_INPUT_HEIGHT = 40\n\nconst INPUT_HEIGHT_MAP = {\n  large: 36,\n  default: 32,\n  small: 28,\n}\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  components: {\n    ElCascaderPanel,\n    ElInput,\n    ElTooltip,\n    ElScrollbar,\n    ElTag,\n    ElIcon,\n    CircleClose,\n    Check,\n    ArrowDown,\n  },\n\n  directives: {\n    Clickoutside,\n  },\n\n  props: {\n    ...CommonProps,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    placeholder: {\n      type: String,\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: {\n      type: Function as PropType<\n        (node: CascaderNode, keyword: string) => boolean\n      >,\n      default: (node: CascaderNode, keyword: string) =>\n        node.text.includes(keyword),\n    },\n    separator: {\n      type: String,\n      default: ' / ',\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true,\n    },\n    collapseTags: Boolean,\n    collapseTagsTooltip: {\n      type: Boolean,\n      default: false,\n    },\n    debounce: {\n      type: Number,\n      default: 300,\n    },\n    beforeFilter: {\n      type: Function as PropType<(value: string) => boolean | Promise<any>>,\n      default: () => true,\n    },\n    popperClass: {\n      type: String,\n      default: '',\n    },\n    teleported: useTooltipContentProps.teleported,\n    // eslint-disable-next-line vue/require-prop-types\n    tagType: { ...tagProps.type, default: 'info' },\n    validateEvent: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    'focus',\n    'blur',\n    'visible-change',\n    'expand-change',\n    'remove-tag',\n  ],\n\n  setup(props, { emit }) {\n    let inputInitialHeight = 0\n    let pressDeleteCount = 0\n\n    const nsCascader = useNamespace('cascader')\n    const nsInput = useNamespace('input')\n\n    const { t } = useLocale()\n    const { form, formItem } = useFormItem()\n\n    const tooltipRef: Ref<tooltipType | null> = ref(null)\n    const input: Ref<inputType | null> = ref(null)\n    const tagWrapper = ref(null)\n    const panel: Ref<cascaderPanelType | null> = ref(null)\n    const suggestionPanel: Ref<suggestionPanelType | null> = ref(null)\n    const popperVisible = ref(false)\n    const inputHover = ref(false)\n    const filtering = ref(false)\n    const inputValue = ref('')\n    const searchInputValue = ref('')\n    const presentTags: Ref<Tag[]> = ref([])\n    const allPresentTags: Ref<Tag[]> = ref([])\n    const suggestions: Ref<CascaderNode[]> = ref([])\n    const isOnComposition = ref(false)\n\n    const isDisabled = computed(() => props.disabled || form?.disabled)\n    const inputPlaceholder = computed(\n      () => props.placeholder || t('el.cascader.placeholder')\n    )\n    const realSize = useSize()\n    const tagSize = computed(() =>\n      ['small'].includes(realSize.value) ? 'small' : 'default'\n    )\n    const multiple = computed(() => !!props.props.multiple)\n    const readonly = computed(() => !props.filterable || multiple.value)\n    const searchKeyword = computed(() =>\n      multiple.value ? searchInputValue.value : inputValue.value\n    )\n    const checkedNodes: ComputedRef<CascaderNode[]> = computed(\n      () => panel.value?.checkedNodes || []\n    )\n    const clearBtnVisible = computed(() => {\n      if (\n        !props.clearable ||\n        isDisabled.value ||\n        filtering.value ||\n        !inputHover.value\n      )\n        return false\n\n      return !!checkedNodes.value.length\n    })\n    const presentText = computed(() => {\n      const { showAllLevels, separator } = props\n      const nodes = checkedNodes.value\n      return nodes.length\n        ? multiple.value\n          ? ' '\n          : nodes[0].calcText(showAllLevels, separator)\n        : ''\n    })\n\n    const checkedValue = computed<CascaderValue>({\n      get() {\n        return props.modelValue as CascaderValue\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n        if (props.validateEvent) {\n          formItem?.validate('change').catch((err) => debugWarn(err))\n        }\n      },\n    })\n\n    const popperPaneRef = computed(() => {\n      return tooltipRef.value?.popperRef?.contentRef\n    })\n\n    const togglePopperVisible = (visible?: boolean) => {\n      if (isDisabled.value) return\n\n      visible = visible ?? !popperVisible.value\n\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible\n        input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n        if (visible) {\n          updatePopperPosition()\n          nextTick(panel.value?.scrollToExpandingNode)\n        } else if (props.filterable) {\n          const { value } = presentText\n          inputValue.value = value\n          searchInputValue.value = value\n        }\n\n        emit('visible-change', visible)\n      }\n    }\n\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        tooltipRef.value?.updatePopper()\n      })\n    }\n\n    const hideSuggestionPanel = () => {\n      filtering.value = false\n    }\n\n    const genTag = (node: CascaderNode): Tag => {\n      const { showAllLevels, separator } = props\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false,\n      }\n    }\n\n    const deleteTag = (tag: Tag) => {\n      const node = tag.node as CascaderNode\n      node.doCheck(false)\n      panel.value?.calculateCheckedValue()\n      emit('remove-tag', node.valueByOption)\n    }\n\n    const calculatePresentTags = () => {\n      if (!multiple.value) return\n\n      const nodes = checkedNodes.value\n      const tags: Tag[] = []\n\n      const allTags: Tag[] = []\n      nodes.forEach((node) => allTags.push(genTag(node)))\n      allPresentTags.value = allTags\n\n      if (nodes.length) {\n        const [first, ...rest] = nodes\n        const restCount = rest.length\n\n        tags.push(genTag(first))\n\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true,\n            })\n          } else {\n            rest.forEach((node) => tags.push(genTag(node)))\n          }\n        }\n      }\n\n      presentTags.value = tags\n    }\n\n    const calculateSuggestions = () => {\n      const { filterMethod, showAllLevels, separator } = props\n      const res = panel.value\n        ?.getFlattedNodes(!props.props.checkStrictly)\n        ?.filter((node) => {\n          if (node.isDisabled) return false\n          node.calcText(showAllLevels, separator)\n          return filterMethod(node, searchKeyword.value)\n        })\n\n      if (multiple.value) {\n        presentTags.value.forEach((tag) => {\n          tag.hitState = false\n        })\n        allPresentTags.value.forEach((tag) => {\n          tag.hitState = false\n        })\n      }\n\n      filtering.value = true\n      suggestions.value = res!\n      updatePopperPosition()\n    }\n\n    const focusFirstNode = () => {\n      let firstNode!: HTMLElement\n\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(\n          `.${nsCascader.e('suggestion-item')}`\n        )\n      } else {\n        firstNode = panel.value?.$el.querySelector(\n          `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n        )\n      }\n\n      if (firstNode) {\n        firstNode.focus()\n        !filtering.value && firstNode.click()\n      }\n    }\n\n    const updateStyle = () => {\n      const inputInner = input.value?.input\n      const tagWrapperEl = tagWrapper.value\n      const suggestionPanelEl = suggestionPanel.value?.$el\n\n      if (!isClient || !inputInner) return\n\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(\n          `.${nsCascader.e('suggestion-list')}`\n        )\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n      }\n\n      if (tagWrapperEl) {\n        const { offsetHeight } = tagWrapperEl\n        const height =\n          presentTags.value.length > 0\n            ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n            : `${inputInitialHeight}px`\n        inputInner.style.height = height\n        updatePopperPosition()\n      }\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return panel.value?.getCheckedNodes(leafOnly)\n    }\n\n    const handleExpandChange = (value: CascaderValue) => {\n      updatePopperPosition()\n      emit('expand-change', value)\n    }\n\n    const handleComposition = (event: CompositionEvent) => {\n      const text = (event.target as HTMLInputElement)?.value\n      if (event.type === 'compositionend') {\n        isOnComposition.value = false\n        nextTick(() => handleInput(text))\n      } else {\n        const lastCharacter = text[text.length - 1] || ''\n        isOnComposition.value = !isKorean(lastCharacter)\n      }\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isOnComposition.value) return\n\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible()\n          break\n        case EVENT_CODE.down:\n          togglePopperVisible(true)\n          nextTick(focusFirstNode)\n          e.preventDefault()\n          break\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault()\n            e.stopPropagation()\n            togglePopperVisible(false)\n          }\n          break\n        case EVENT_CODE.tab:\n          togglePopperVisible(false)\n          break\n      }\n    }\n\n    const handleClear = () => {\n      panel.value?.clearCheckedNodes()\n      togglePopperVisible(false)\n    }\n\n    const handleSuggestionClick = (node: CascaderNode) => {\n      const { checked } = node\n\n      if (multiple.value) {\n        panel.value?.handleCheckChange(node, !checked, false)\n      } else {\n        !checked && panel.value?.handleCheckChange(node, true, false)\n        togglePopperVisible(false)\n      }\n    }\n\n    const handleSuggestionKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(\n              target,\n              distance,\n              `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n            )\n          )\n          break\n        }\n        case EVENT_CODE.enter:\n          target.click()\n          break\n      }\n    }\n\n    const handleDelete = () => {\n      const tags = presentTags.value\n      const lastTag = tags[tags.length - 1]\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n      if (!lastTag || !pressDeleteCount) return\n\n      if (lastTag.hitState) {\n        deleteTag(lastTag)\n      } else {\n        lastTag.hitState = true\n      }\n    }\n\n    const handleFilter = debounce(() => {\n      const { value } = searchKeyword\n\n      if (!value) return\n\n      const passed = props.beforeFilter(value)\n\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {\n          /* prevent log error */\n        })\n      } else if (passed !== false) {\n        calculateSuggestions()\n      } else {\n        hideSuggestionPanel()\n      }\n    }, props.debounce)\n\n    const handleInput = (val: string, e?: KeyboardEvent) => {\n      !popperVisible.value && togglePopperVisible(true)\n\n      if (e?.isComposing) return\n\n      val ? handleFilter() : hideSuggestionPanel()\n    }\n\n    watch(filtering, updatePopperPosition)\n\n    watch([checkedNodes, isDisabled], calculatePresentTags)\n\n    watch(presentTags, () => {\n      nextTick(() => updateStyle())\n    })\n\n    watch(presentText, (val) => (inputValue.value = val), { immediate: true })\n\n    onMounted(() => {\n      const inputEl = input.value?.$el\n      inputInitialHeight =\n        inputEl?.offsetHeight ||\n        INPUT_HEIGHT_MAP[realSize.value] ||\n        DEFAULT_INPUT_HEIGHT\n      useResizeObserver(inputEl, updateStyle)\n    })\n\n    return {\n      popperOptions,\n      tooltipRef,\n      popperPaneRef,\n      input,\n      tagWrapper,\n      panel,\n      suggestionPanel,\n      popperVisible,\n      inputHover,\n      inputPlaceholder,\n      filtering,\n      presentText,\n      checkedValue,\n      inputValue,\n      searchInputValue,\n      presentTags,\n      allPresentTags,\n      suggestions,\n      isDisabled,\n      isOnComposition,\n      realSize,\n      tagSize,\n      multiple,\n      readonly,\n      clearBtnVisible,\n\n      nsCascader,\n      nsInput,\n      t,\n      togglePopperVisible,\n      hideSuggestionPanel,\n      deleteTag,\n      focusFirstNode,\n      getCheckedNodes,\n      handleExpandChange,\n      handleKeyDown,\n      handleComposition,\n      handleClear,\n      handleSuggestionClick,\n      handleSuggestionKeyDown,\n      handleDelete,\n      handleInput,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}