{"ast":null,"code":"import { isRef, watch, onScopeDispose } from 'vue';\nimport { computed } from '@vue/reactivity';\nimport { isClient } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { useNamespace } from '../use-namespace/index.mjs';\nimport { throwError } from '../../utils/error.mjs';\nimport { hasClass, removeClass, getStyle, addClass } from '../../utils/dom/style.mjs';\nimport { getScrollBarWidth } from '../../utils/dom/scroll.mjs';\n\nconst useLockscreen = trigger => {\n  if (!isRef(trigger)) {\n    throwError(\"[useLockscreen]\", \"You need to pass a ref param to this function\");\n  }\n\n  const ns = useNamespace(\"popup\");\n  const hiddenCls = computed(() => ns.bm(\"parent\", \"hidden\"));\n\n  if (!isClient || hasClass(document.body, hiddenCls.value)) {\n    return;\n  }\n\n  let scrollBarWidth = 0;\n  let withoutHiddenClass = false;\n  let bodyWidth = \"0\";\n\n  const cleanup = () => {\n    removeClass(document.body, hiddenCls.value);\n\n    if (withoutHiddenClass) {\n      document.body.style.width = bodyWidth;\n    }\n  };\n\n  watch(trigger, val => {\n    if (!val) {\n      cleanup();\n      return;\n    }\n\n    withoutHiddenClass = !hasClass(document.body, hiddenCls.value);\n\n    if (withoutHiddenClass) {\n      bodyWidth = document.body.style.width;\n    }\n\n    scrollBarWidth = getScrollBarWidth(ns.namespace.value);\n    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n    const bodyOverflowY = getStyle(document.body, \"overflowY\");\n\n    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === \"scroll\") && withoutHiddenClass) {\n      document.body.style.width = `calc(100% - ${scrollBarWidth}px)`;\n    }\n\n    addClass(document.body, hiddenCls.value);\n  });\n  onScopeDispose(() => cleanup());\n};\n\nexport { useLockscreen };","map":{"version":3,"mappings":";;;;;;;;;AAYY,MAACA,aAAa,GAAIC,OAAD,IAAa;EACxC,IAAI,CAACC,KAAK,CAACD,OAAD,CAAV,EAAqB;IACnBE,UAAU,CAAC,iBAAD,EAAoB,+CAApB,CAAV;EACD;;EACD,MAAMC,EAAE,GAAGC,YAAY,CAAC,OAAD,CAAvB;EACA,MAAMC,SAAS,GAAGC,QAAQ,CAAC,MAAMH,EAAE,CAACI,EAAH,CAAM,QAAN,EAAgB,QAAhB,CAAP,CAA1B;;EACA,IAAI,CAACC,QAAD,IAAaC,QAAQ,CAACC,QAAQ,CAACC,IAAV,EAAgBN,SAAS,CAACO,KAA1B,CAAzB,EAA2D;IACzD;EACD;;EACD,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,kBAAkB,GAAG,KAAzB;EACA,IAAIC,SAAS,GAAG,GAAhB;;EACA,MAAMC,OAAO,GAAG,MAAM;IACpBC,WAAW,CAACP,QAAQ,CAACC,IAAV,EAAgBN,SAAS,CAACO,KAA1B,CAAX;;IACA,IAAIE,kBAAJ,EAAwB;MACtBJ,QAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,KAApB,GAA4BJ,SAA5B;IACD;EACF,CALD;;EAMAK,KAAK,CAACpB,OAAD,EAAWqB,GAAD,IAAS;IACtB,IAAI,CAACA,GAAL,EAAU;MACRL,OAAO;MACP;IACD;;IACDF,kBAAkB,GAAG,CAACL,QAAQ,CAACC,QAAQ,CAACC,IAAV,EAAgBN,SAAS,CAACO,KAA1B,CAA9B;;IACA,IAAIE,kBAAJ,EAAwB;MACtBC,SAAS,GAAGL,QAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,KAAhC;IACD;;IACDN,cAAc,GAAGS,iBAAiB,CAACnB,EAAE,CAACoB,SAAH,CAAaX,KAAd,CAAlC;IACA,MAAMY,eAAe,GAAGd,QAAQ,CAACe,eAAT,CAAyBC,YAAzB,GAAwChB,QAAQ,CAACC,IAAT,CAAcgB,YAA9E;IACA,MAAMC,aAAa,GAAGC,QAAQ,CAACnB,QAAQ,CAACC,IAAV,EAAgB,WAAhB,CAA9B;;IACA,IAAIE,cAAc,GAAG,CAAjB,KAAuBW,eAAe,IAAII,aAAa,KAAK,QAA5D,KAAyEd,kBAA7E,EAAiG;MAC/FJ,QAAQ,CAACC,IAAT,CAAcO,KAAd,CAAoBC,KAApB,GAA6B,eAAcN,cAAe,KAA1D;IACD;;IACDiB,QAAQ,CAACpB,QAAQ,CAACC,IAAV,EAAgBN,SAAS,CAACO,KAA1B,CAAR;EACD,CAhBI,CAAL;EAiBAmB,cAAc,CAAC,MAAMf,OAAO,EAAd,CAAd;AACF,CApCY","names":["useLockscreen","trigger","isRef","throwError","ns","useNamespace","hiddenCls","computed","bm","isClient","hasClass","document","body","value","scrollBarWidth","withoutHiddenClass","bodyWidth","cleanup","removeClass","style","width","watch","val","getScrollBarWidth","namespace","bodyHasOverflow","documentElement","clientHeight","scrollHeight","bodyOverflowY","getStyle","addClass","onScopeDispose"],"sources":["../../../../../packages/hooks/use-lockscreen/index.ts"],"sourcesContent":["import { isRef, onScopeDispose, watch } from 'vue'\n\nimport { computed } from '@vue/reactivity'\nimport { isClient } from '@vueuse/core'\nimport {\n  addClass,\n  getScrollBarWidth,\n  getStyle,\n  hasClass,\n  removeClass,\n  throwError,\n} from '@element-plus/utils'\nimport { useNamespace } from '../use-namespace'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n\n  const ns = useNamespace('popup')\n\n  const hiddenCls = computed(() => ns.bm('parent', 'hidden'))\n\n  if (!isClient || hasClass(document.body, hiddenCls.value)) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyWidth = '0'\n\n  const cleanup = () => {\n    removeClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      document.body.style.width = bodyWidth\n    }\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      bodyWidth = document.body.style.width\n    }\n    scrollBarWidth = getScrollBarWidth(ns.namespace.value)\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.width = `calc(100% - ${scrollBarWidth}px)`\n    }\n    addClass(document.body, hiddenCls.value)\n  })\n  onScopeDispose(() => cleanup())\n}\n"]},"metadata":{},"sourceType":"module"}